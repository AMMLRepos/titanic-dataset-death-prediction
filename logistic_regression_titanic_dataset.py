# -*- coding: utf-8 -*-
"""Logistic Regression - Titanic dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LtYXYyXdG48GJ_jQu-VaGOcj7ddV1Rnw
"""

# Jovian Commit Essentials
# Please retain and execute this cell without modifying the contents for `jovian.commit` to work
!pip install jovian --upgrade -q
import jovian
jovian.set_project('logistic-regression-practice-titanic-dataset')
jovian.set_colab_id('1LtYXYyXdG48GJ_jQu-VaGOcj7ddV1Rnw')

"""# Logistic Regression on Titanic Dataset 

## About Titanic 
RMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean on 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking at the time one of the deadliest of a single ship and the deadliest peacetime sinking of a superliner or cruise ship to date. With much public attention in the aftermath, the disaster has since been the material of many artistic works and a founding material of the disaster film genre.

## Objective of the project 
This activity rather than a project is for begginers to get a very basic excesice on performing Logistic Regression Classification algorithm to predict if a person would have survived the disaster. 

## Who should try this out ?
- A beginner in Data Science and Machine Learning 
- A beginner who started learning sklearn machine learning library of python
- Someone looking for a simple use case of applying machine learning on standard Titanic dataset
- Someone looking for a simple use case of applying machine learning using sklearn python library

## Acknowledgement 
This activity is followed based on the instructions provided on an udemy course named [Machine Learning Classification Bootcamp in Python](https://www.udemy.com/course/machine-learning-classification/)
"""

!pip install jovian --upgrade --quiet

import jovian

# Execute this to save new versions of the notebook
jovian.commit(project="logistic-regression-practice-titanic-dataset")

"""# Downloading Titanic dataset 

Titanic dataset can be download from Kaggle using this [link](https://www.kaggle.com/soutarokirihara/data-science-day1-titanic)

We will use opendatasets library to download the Titanic dataset. Steps for the same are given below. One can also download the dataset manually from Kaggle and then upload it into Jupyter Notebook


"""

!pip install opendatasets

import opendatasets as od

dataset_url = "https://www.kaggle.com/soutarokirihara/data-science-day1-titanic"
od.download(dataset_url)

import os 
data_directory = "./data-science-day1-titanic"
os.listdir(data_directory)

"""# Understanding downloaded dataset

We need to understand the columns available in the dataset and what they mean. Let us list down the columns and their details - 

- **PassengerId** - A unique ID given to each passenger on the Titanic  
- **Survived** - Whether a passenger survived or not. 0 for not survived and 1 for survived 
- **PClass** - class of travel where 3 being lowest and 1 being highest 
- **Name**- Name of passenger 
- **Sex** - gender of passenger with male and female as values
- **Age** - age of passenger in years
- **SibSp** - # of parents / children aboard the Titanic
- **Parch** - # of parents / children aboard the Titanic
- **Ticket** - Ticket ID for tickets bought 
- **Fare** - Fare of the travel
- **Cabin** - Cabin if allocated to a specific person
- **Embarked** - Ports from where the passenger boarded the ship. Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton

# Target Label - What are we predicting ?
- Survival of a passenger - survived = 0(not survived) or survived = 1(survived)

Based on the above information, we can conclude that PassengerId, Cabin, Name of Person, Embarked and Ticket columns should not have an impact on the model we develop and hence are not useful columns indeed. 

Let us know get started with steps to build our model. We have following major steps - 

- #Step 1 - Import required libraries and load the dataset 
- #Step 2 - Do basic visualization on the data to have a few basic questions answered 
- #Step 3 - Clean the data and split it into train and test dataset
- #Step 4 - Train the model 
- #Step 5 - Test the model

# Step 1 - Import libraries
Assumping all required libraries are installed, import -
- pandas - basic operations on the data 
- numpy - basic operations on the data 
- seaborn - plotting graphs
- matplotlib - plotting graphs
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""create a dataframe named "training_set" and load the csv file data. Use head function to see first 10 rows of dataframe"""

training_set = pd.read_csv('./data-science-day1-titanic/DSB_Day1_Titanic_train.csv')
training_set.head(10)

jovian.commit()

"""See the last 10 records of the dataset """

training_set.tail(10)

"""Get basic information and statistics from the dataframe"""

training_set.info()

"""The above output gives us the following information - 
- There are 12 columns in the dataset
- There are maximum of 891 rows in the dataset 
- Age and Cabin have missing values 
- Embarked has 2 missing values 
- Dataset has int, float and object type of data 
"""

training_set.describe()

"""describe() function provides a few more mathematical details of the dataset. We can infer the following from the above output - 
- Average age of a person is 29.6 with max being 80 and min being 0.42(this does not make sense and is a value which will impact your analysis)
- Other columns being string type does not provide any significant output and can be ignored

# Basic visualizatin of dataset
Let us plot some basic graphs to see patterns in our dataset for columns we think might impact the prediction

Let us get the count of survived and not survived passengers on Titanic
"""

survived_df = training_set[training_set['Survived'] == 1]
not_survived_df = training_set[training_set['Survived'] == 0]

print('Total number of records ', len(training_set))
print("Number of passengers survived ", len(survived_df))
print("Number of passengers who failed to survived ", len(not_survived_df))

"""The output show above shows that we have more records for people who failed to survive on Titanic and lesser for survived. 

Let us now print the % of survived and not survived passengers.
"""

print('Total percentage of passengers survived = ', (len(survived_df) / len(training_set)) * 100 , "%" )
print('Total percentage of passengers died = ', (len(not_survived_df) / len(training_set)) * 100 , "%" )

"""The above output shows that 38% approx. of passengers survived the disaster and 61% approx. failed. This is important for us as we need to properly split our data into train and test in next steps so as to ensure that both our datasets have right proportion of survived vs not-survived passenger data. If we don't do that our model cannot be relied on as it might end up getting trained on more on any one of the category. We will see more of this in the step where we split our data and train our model

## Passengers belonging to each class of travel
The graph below shows that Titanic had almost double number of passengers who travelled in Class 3 (poorest of all)
"""

sns.countplot(x = 'Pclass', data = training_set)

"""Let us now see how the class of travel impacts the survival on Titanic. We will plot a graph showing survival of each class of passenger. 

Based on the graph below we can observe that - 
- The survival rate was much higher for passengers who travelled in Class 1 (richest of all). We can see that more passengers travelling in Class 1 survived compared to not-survived 
- The survival rate for passengers travelling in Class 3 is completely opposite of Class 1. Many more travellers in Class 3 failed to survive and its almost double 
- The behavior in Class 2, i.e., the middle class remains same where passengers survived are almost equal to passengers who failed to survive 

We can safely say that passengers travelling in Class 1 are more likely to survive if the disaster happens again in same circumstances. Passengers in Class 3 are more unlikely to survive and might die as a result of this incident.  
"""

sns.countplot(x = 'Pclass', hue = 'Survived', data = training_set)

"""Let us get the percentage of passengers who survived in the disaster based on Class

We will first get the count of passengers by Class and then check the percentage 
"""

total_class_1_passengers_df = training_set[training_set['Pclass'] == 1]
total_class_2_passengers_df = training_set[training_set['Pclass'] == 2]
total_class_3_passengers_df = training_set[training_set['Pclass'] == 3]

print("Total Passengers who travelled in Class 1 - ", len(total_class_1_passengers_df))
print("Total Passengers who travelled in Class 2 - ", len(total_class_2_passengers_df))
print("Total Passengers who travelled in Class 3 - ", len(total_class_3_passengers_df))

total_survived_class_1_passengers = total_class_1_passengers_df[total_class_1_passengers_df['Survived'] == 1]
total_survived_class_2_passengers = total_class_2_passengers_df[total_class_2_passengers_df['Survived'] == 1]
total_survived_class_3_passengers = total_class_3_passengers_df[total_class_3_passengers_df['Survived'] == 1]


print("Total Passengers who travelled in Class 1 and survived - ", len(total_survived_class_1_passengers))
print("Total Passengers who travelled in Class 2 and survived - ", len(total_survived_class_2_passengers))
print("Total Passengers who travelled in Class 3 and survived - ", len(total_survived_class_3_passengers))

percent_survival_class_1 = len(total_survived_class_1_passengers) / len(total_class_1_passengers_df) * 100
percent_survival_class_2 = len(total_survived_class_2_passengers) / len(total_class_2_passengers_df) * 100
percent_survival_class_3 = len(total_survived_class_3_passengers) / len(total_class_3_passengers_df) * 100

print("Percentage of Survivors who travelled in Class 1 - ", percent_survival_class_1, "%")
print("Percentage of Survivors who travelled in Class 2 - ", percent_survival_class_2, "%")
print("Percentage of Survivors who travelled in Class 3 - ", percent_survival_class_3, "%")

"""**The above outcome clearly indicates that only 24% of passengers who travelled in Class 3 survived the disaster compared to 63% of passengers who travelled in Class 1**

Let us now see that how many passengers had siblings boarded to Titanic and how they performed in terms of survival. We will plot a graph for both as given -
"""

sns.countplot(x = "SibSp", data = training_set)

"""The graph given above clearly indicated that a huge number (almost 80%) of passengers had 0 siblings on-boarded to Titanic """

sns.countplot(x = "SibSp", hue = "Survived", data = training_set)

"""The above graph indicates that passengers having 1 sibling with them did better and survived the disaster compared to passengers who had no siblings onboarded. In next few cells, we will try the same for Parch column too and will find a similiar trend"""

sns.countplot(x = 'Parch', data = training_set)

sns.countplot(x = 'Parch', hue = "Survived", data = training_set)

"""## Count of passenges on-boarded from various cities/ports 
Let us know see how the graph on how many passengers boarded Titanic from various ports marked in the dataset. 

From the graph given below, it is clealy indicated that Southampton onboarded almost 80 % of total passengers. This being the fact, we might also get most number of deaths from the city too.
"""

sns.countplot(x = 'Embarked', data = training_set)

"""**As assumed, most number of passengers who onboarded from Southampton, almost 400+ passengers failed to survive the disaster. While location could be an incident, we cannot deny the fact that Class 3 passengers being the maxium among failing to survive, most of them came from Southampton**"""

sns.countplot(x = 'Embarked', hue = 'Survived', data = training_set)

"""Let us now try to get the following - 
- How many males and females where travelling in Titanic ?
- How many males and females survived the accident ?
- What was the percentage of survival for male and female ?
- What was the percentage of males and females based on the class of travel ?

"""

sns.countplot(x = 'Sex', data = training_set)

"""## How many males and females where travelling in Titanic ?

"""

males_count = training_set[training_set['Sex'] == 'male']
females_count = training_set[training_set['Sex'] == 'female']

print("Number of males - ", len(males_count))

print("Number of Females - ", len(females_count))

"""## How many males and females survived the accident ?"""

survived_males_count = training_set.loc[(training_set['Sex'] == 'male') & (training_set['Survived'] == 1)]
survived_females_count = training_set.loc[(training_set['Sex'] == 'female') & (training_set['Survived'] == 1)]


print("Numbes of males who survived - ", len(survived_males_count))
print("Number of females who survived - ", len(survived_females_count))

"""## What was the percentage of survival for male and female ?"""

percentage_of_males_survived =  len(survived_males_count) / len(males_count) * 100
percentage_of_females_survived = len(survived_females_count) / len(females_count)  * 100

print("Percentage of males survived - ", percentage_of_males_survived)
print("Percentage of females survived - ", percentage_of_females_survived)

"""## What was the percentage of males and females based on the class of travel ?"""

males_class_1 = training_set.loc[(training_set['Sex'] == 'male') & (training_set['Pclass'] == 1)].count()['Pclass']
males_class_2 = training_set.loc[(training_set['Sex'] == 'male') & (training_set['Pclass'] == 2)].count()['Pclass']
males_class_3 = training_set.loc[(training_set['Sex'] == 'male') & (training_set['Pclass'] == 3)].count()['Pclass']


females_class_1 = training_set.loc[(training_set['Sex'] == 'female') & (training_set['Pclass'] == 1)].count()['Pclass']
females_class_2 = training_set.loc[(training_set['Sex'] == 'female') & (training_set['Pclass'] == 2)].count()['Pclass']
females_class_3 = training_set.loc[(training_set['Sex'] == 'female') & (training_set['Pclass'] == 3)].count()['Pclass']


print("Percentage of males travelling in Class 1 - ", (males_class_1 / len(males_count)* 100))
print("Percentage of males travelling in Class 2 - ", (males_class_2 / len(males_count)* 100) )
print("Percentage of males travelling in Class 3 - ", (males_class_3 / len(males_count)* 100))

print("Percentage of females travelling in Class 1 - ", (females_class_1 / len(females_count)* 100))
print("Percentage of females travelling in Class 2 - ", (females_class_2 / len(females_count)* 100))
print("Percentage of females travelling in Class 3 - ", (females_class_3 / len(females_count)* 100))
jovian.commit()

"""The below graph indicates that "Females" were given priority for life saving activities and hence almost double females survived compared to not survived females

Other two graphs on age and fare are plotted but are not signifying anything critical
"""

sns.countplot(x = 'Sex', hue = "Survived", data = training_set)

sns.countplot(x = 'Age', hue = "Survived", data = training_set)

training_set['Age'].hist(bins = 40)

training_set['Fare'].hist(bins = 40)

jovian.commit()

"""# Step 3 - Cleaning data - prepare the data for training"""

training_set

sns.heatmap(training_set.isnull(), yticklabels = False, cbar = False, cmap= 'Blues')

training_set

training_set.drop(['Ticket', 'PassengerId', 'Name', 'Cabin'], axis = 1, inplace = True)

training_set

sns.heatmap(training_set.isnull(), yticklabels = False, cbar = False, cmap = 'Blues')

plt.figure(figsize = (15,10))
sns.boxplot(x = 'Sex', y = 'Age', data = training_set)

def fill_Age(data):
  age = data[0]
  sex = data[1]

  if pd.isnull(age):
    if sex is 'male':
      return 29
    else:
      return 25
  else:
    return age

training_set ['Age'] = training_set[['Age', 'Sex']].apply(fill_Age, axis = 1)

training_set

sns.heatmap(training_set.isnull(), yticklabels = False, cbar = False, cmap = 'Blues')

training_set['Age'].hist(bins = 40)

male = pd.get_dummies(training_set['Sex'])

male = pd.get_dummies(training_set['Sex'], drop_first = True)
male

training_set.drop('Sex', axis = 1, inplace = True)

training_set

training_set = pd.concat([training_set, male], axis = 1)

training_set

# Input
X = training_set.drop(['Survived', 'Embarked'], axis = 1).values

X

Y = training_set['Survived'].values

Y

jovian.commit()

"""# Step 4 - Model Training """

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 10 )

len(X_train)
X_train

len(X_test)

len(Y_train)
Y_train

len(Y_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, Y_train)

jovian.commit()

"""# Step 5 - Model Testing"""

y_predict = classifier.predict(X_test)

y_predict

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, y_predict)
sns.heatmap(cm, annot = True, fmt = 'd')

jovian.commit()

from sklearn.metrics import classification_report
print(classification_report(Y_test, y_predict))

jovian.commit()

test_frame = pd.read_csv('./Test_Titanic.csv')